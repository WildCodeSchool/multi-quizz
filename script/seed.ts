import "dotenv/config"
import mysql from "mysql2/promise"

const { MYSQL_DB_HOST, MYSQL_DB_USER, MYSQL_DB_PASSWORD, MYSQL_DB_NAME } =
  process.env

const seedData = [
  {
    title: "Partial Prerendering",
    content:
      "Next.js 15 introduit le rendu partiel c√¥t√© serveur pour une exp√©rience utilisateur ultra fluide.",
  },
  {
    title: "React 19 int√©gr√©",
    content:
      "Next.js 15 exploite React 19 pour des performances boost√©es avec le streaming SSR natif.",
  },
  {
    title: "App Router standard",
    content:
      "L'ancien Pages Router est maintenant remplac√© par App Router dans toutes les nouvelles apps Next.js.",
  },
  {
    title: "Layouts imbriqu√©s",
    content:
      "Chaque r√©pertoire peut contenir son propre layout, favorisant un design modulaire et coh√©rent.",
  },
  {
    title: "Templates dynamiques",
    content:
      "Utilisez les fichiers `template.tsx` pour d√©finir des structures alternatives √† vos layouts classiques.",
  },
  {
    title: "Middleware puissant",
    content:
      "Appliquez des middlewares pour g√©rer l'authentification, les redirections ou le tracking sans affecter le rendu.",
  },
  {
    title: "Composants Server & Client",
    content:
      "Next.js 15 s√©pare proprement les composants Client et Server pour optimiser le rendu et la s√©curit√©.",
  },
  {
    title: "Optimisation des images",
    content:
      "Le composant <Image /> optimise automatiquement le format, la taille et le lazy loading des visuels.",
  },
  {
    title: "API routes encore utiles",
    content:
      "M√™me avec App Router, les routes API sont toujours l√† pour g√©rer les petits besoins backend.",
  },
  {
    title: "TypeScript par d√©faut",
    content:
      "Next.js initialise automatiquement votre projet avec TypeScript et ESLint configur√©s.",
  },
]

const seed = async () => {
  try {
    const db = await mysql.createConnection({
      host: MYSQL_DB_HOST,
      user: MYSQL_DB_USER,
      password: MYSQL_DB_PASSWORD,
      database: MYSQL_DB_NAME,
    })

    await db.query("DELETE FROM info")

    for (const { title, content } of seedData) {
      await db.query("INSERT INTO info (title, content) VALUES (?, ?)", [
        title,
        content,
      ])
    }

    await db.end()
    console.log("üå± Database seeded successfully")
  } catch (err) {
    console.error("‚ùå Error during seeding:", err)
  }
}

seed()
